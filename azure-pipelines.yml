#Testing about CI


trigger:
- main

pool:
  vmImage: 'windows-latest'

steps:
- powershell: |
    $filePath = "Common"
    if (-not (Test-Path $filePath)) {
        Write-Output "The file '$filePath' does not exist."
        exit 1  # Fail the task
    } else {
        Write-Output "The file '$filePath' exists."
    }
  displayName: 'Check File Existence'
  

- task: DotNetCoreCLI@2
  displayName: 'BUILD'
  inputs:
    command: 'build'
    projects: '**/*.csproj'


- task: DotNetCoreCLI@2
  displayName: 'TEST'
  inputs:
    command: 'test'
    projects: '**/*[Tt]ests*/*.csproj'
    # arguments: '--configuration release --output $(Build.ArtifactStagingDirectory) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    # publishTestResults: true
    arguments: '--configuration $(BuildConfiguration) --collect:"Code coverage"'
    publishTestResults: true
    publishCodeCoverage: true

- task: BuildQualityChecks@9
  displayName: 'Build Quality Check'
  inputs:
    checkWarnings: true
    warningFailOption: 'fixed'
    warningThreshold: '15'
    checkCoverage: true
    coverageFailOption: 'fixed'
    coverageType: 'blocks'
    coverageThreshold: '5'

# - task: PublishCodeCoverageResults@2
#   inputs:
#     summaryFileLocation: '$(Agent.TempDirectory)\\coverage.cobertura.xml'



# - task: PowerShell@2
#   displayName: 'Check code coverage'
#   inputs:
#     targetType: 'inline'
#     script: |
#       $coverageReportPath = '$(Agent.TempDirectory)\\coverage.cobertura.xml'
#       $coverageReport = Get-Content $coverageReportPath
#       $coveragePercentage = [xml]$coverageReport | Select-Xml -XPath "/CoverageReport/Summary/Percent"
#       $coveragePercentageValue = $coveragePercentage.Node.InnerText

#       if ($coveragePercentageValue -lt 80) {
#         Write-Host "Code coverage is less than 80%. Stopping the build."
#         exit 1
#       }
#       else {
#         Write-Host "Code coverage is greater than or equal to 80%. Continuing the build."
#       }



    
- task: DotNetCoreCLI@2
  displayName: 'PUBLISH'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/StudentManagementAPI.csproj'
    arguments: '--configuration release --output $(Build.ArtifactStagingDirectory) '
    

# - task: CopyFiles@2
#   inputs:
#     Contents: '/*.dll'
#     TargetFolder: '$(build.artifactstagingdirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'dll_file'
    publishLocation: 'Container'